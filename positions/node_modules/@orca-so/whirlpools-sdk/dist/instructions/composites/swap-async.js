"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.swapAsync = void 0;
const common_sdk_1 = require("@orca-so/common-sdk");
const __1 = require("../..");
const swap_ix_1 = require("../swap-ix");
/**
 * Swap instruction builder method with resolveATA & additional checks.
 * @param ctx - WhirlpoolContext object for the current environment.
 * @param params - {@link SwapAsyncParams}
 * @param refresh - If true, the network calls will always fetch for the latest values.
 * @returns
 */
function swapAsync(ctx, params, refresh) {
    return __awaiter(this, void 0, void 0, function* () {
        const { wallet, whirlpool, swapInput } = params;
        const { aToB, amount } = swapInput;
        const txBuilder = new common_sdk_1.TransactionBuilder(ctx.connection, ctx.wallet);
        const tickArrayAddresses = [swapInput.tickArray0, swapInput.tickArray1, swapInput.tickArray2];
        let uninitializedArrays = yield __1.TickArrayUtil.getUninitializedArraysString(tickArrayAddresses, ctx.fetcher, refresh);
        if (uninitializedArrays) {
            throw new Error(`TickArray addresses - [${uninitializedArrays}] need to be initialized.`);
        }
        const data = whirlpool.getData();
        const [resolvedAtaA, resolvedAtaB] = yield (0, common_sdk_1.resolveOrCreateATAs)(ctx.connection, wallet, [
            { tokenMint: data.tokenMintA, wrappedSolAmountIn: aToB ? amount : common_sdk_1.ZERO },
            { tokenMint: data.tokenMintB, wrappedSolAmountIn: !aToB ? amount : common_sdk_1.ZERO },
        ], () => ctx.fetcher.getAccountRentExempt());
        const { address: ataAKey } = resolvedAtaA, tokenOwnerAccountAIx = __rest(resolvedAtaA, ["address"]);
        const { address: ataBKey } = resolvedAtaB, tokenOwnerAccountBIx = __rest(resolvedAtaB, ["address"]);
        txBuilder.addInstructions([tokenOwnerAccountAIx, tokenOwnerAccountBIx]);
        const inputTokenAccount = aToB ? ataAKey : ataBKey;
        const outputTokenAccount = aToB ? ataBKey : ataAKey;
        return txBuilder.addInstruction((0, swap_ix_1.swapIx)(ctx.program, __1.SwapUtils.getSwapParamsFromQuote(swapInput, ctx, whirlpool, inputTokenAccount, outputTokenAccount, wallet)));
    });
}
exports.swapAsync = swapAsync;
