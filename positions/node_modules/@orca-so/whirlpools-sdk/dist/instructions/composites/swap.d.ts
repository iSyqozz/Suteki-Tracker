import { TransactionBuilder } from "@orca-so/common-sdk";
import { Address } from "@project-serum/anchor";
import { PublicKey } from "@solana/web3.js";
import { WhirlpoolContext, WhirlpoolData } from "../..";
import { SwapInput } from "../swap-ix";
/**
 * Parameters to build a swap transaction.
 *
 * @param poolAddress - The public key for the Whirlpool to swap on
 * @param whirlpool - A {@link WhirlpoolData} on-chain data object for the pool
 * @param input - A quote on the desired tokenIn and tokenOut for this swap. Use {@link swapQuoteWithParams} or other swap quote functions to generate this object.
 * @param wallet - The wallet that tokens will be withdrawn and deposit into.
 * @param resolveAta - If true, function will automatically resolve and create token ATA to receive tokens. If false, it will derive the ATA using the wallet key, but will not create the ATAs.
 */
export type SwapBuilderParams = {
    poolAddress: Address;
    whirlpool: WhirlpoolData;
    input: SwapInput;
    wallet: PublicKey;
    resolveAta: boolean;
};
export declare function swap(ctx: WhirlpoolContext, params: SwapBuilderParams): Promise<TransactionBuilder>;
