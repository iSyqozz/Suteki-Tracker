"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WhirlpoolTx = void 0;
const ix = __importStar(require("./instructions/composites"));
class WhirlpoolTx {
    /**
     * A set of transactions to collect all fees and rewards from a list of positions.
     *
     * @param ctx - WhirlpoolContext object for the current environment.
     * @param params - CollectAllPositionAddressParams object.
     * @param refresh - if true, will always fetch for the latest values on chain to compute.
     * @returns
     */
    static collectAllForPositionsTx(ctx, params, refresh) {
        return ix.collectAllForPositionAddresses(ctx, params, refresh);
    }
}
exports.WhirlpoolTx = WhirlpoolTx;
