"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.swap = void 0;
const common_sdk_1 = require("@orca-so/common-sdk");
const tiny_invariant_1 = __importDefault(require("tiny-invariant"));
const public_1 = require("../../utils/public");
const swap_ix_1 = require("../swap-ix");
function swap(ctx, params) {
    return __awaiter(this, void 0, void 0, function* () {
        const { poolAddress, whirlpool, input, wallet } = params;
        const addressKey = common_sdk_1.AddressUtil.toPubKey(poolAddress);
        (0, tiny_invariant_1.default)(input.amount.gt(common_sdk_1.ZERO), "swap amount must be more than zero.");
        // Check if all the tick arrays have been initialized.
        const tickArrayAddresses = [input.tickArray0, input.tickArray1, input.tickArray2];
        const tickArrays = yield ctx.fetcher.listTickArrays(tickArrayAddresses, true);
        const uninitializedIndices = public_1.TickArrayUtil.getUninitializedArrays(tickArrays);
        if (uninitializedIndices.length > 0) {
            const uninitializedArrays = uninitializedIndices
                .map((index) => tickArrayAddresses[index].toBase58())
                .join(", ");
            throw new Error(`TickArray addresses - [${uninitializedArrays}] need to be initialized.`);
        }
        const { amount, aToB } = input;
        const txBuilder = new common_sdk_1.TransactionBuilder(ctx.provider.connection, ctx.provider.wallet);
        let tokenOwnerAccountA, tokenOwnerAccountB;
        if (params.resolveAta) {
            const [resolvedAtaA, resolvedAtaB] = yield (0, common_sdk_1.resolveOrCreateATAs)(ctx.connection, wallet, [
                { tokenMint: whirlpool.tokenMintA, wrappedSolAmountIn: aToB ? amount : common_sdk_1.ZERO },
                { tokenMint: whirlpool.tokenMintB, wrappedSolAmountIn: !aToB ? amount : common_sdk_1.ZERO },
            ], () => ctx.fetcher.getAccountRentExempt());
            const { address: ataAKey } = resolvedAtaA, tokenOwnerAccountAIx = __rest(resolvedAtaA, ["address"]);
            const { address: ataBKey } = resolvedAtaB, tokenOwnerAccountBIx = __rest(resolvedAtaB, ["address"]);
            txBuilder.addInstruction(tokenOwnerAccountAIx);
            txBuilder.addInstruction(tokenOwnerAccountBIx);
            tokenOwnerAccountA = ataAKey;
            tokenOwnerAccountB = ataBKey;
        }
        else {
            tokenOwnerAccountA = yield (0, common_sdk_1.deriveATA)(wallet, whirlpool.tokenMintA);
            tokenOwnerAccountB = yield (0, common_sdk_1.deriveATA)(wallet, whirlpool.tokenMintB);
        }
        const oraclePda = public_1.PDAUtil.getOracle(ctx.program.programId, addressKey);
        txBuilder.addInstruction((0, swap_ix_1.swapIx)(ctx.program, Object.assign(Object.assign({}, input), { whirlpool: addressKey, tokenAuthority: wallet, tokenOwnerAccountA, tokenVaultA: whirlpool.tokenVaultA, tokenOwnerAccountB, tokenVaultB: whirlpool.tokenVaultB, oracle: oraclePda.publicKey })));
        return txBuilder;
    });
}
exports.swap = swap;
